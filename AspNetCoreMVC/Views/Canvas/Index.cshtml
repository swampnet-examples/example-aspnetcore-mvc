@model AspNetCoreMVC.Models.Canvas.ViewModel

@{
    ViewData["Title"] = "Canvas";
}

<h2>Canvas</h2>

<canvas id="canvas" width="500" height="500" style="border:1px solid #000000;"></canvas>
<button id="undo">oops</button>

@section Scripts{

    @*
        Disable 'save image...' stuff
    *@
    <script>
        $("#canvas").bind('contextmenu', function (e) {
            return false;
        });
    </script>

    <script src="~/js/trackTransforms.js"></script>

    <script>
        var context = $("#canvas")[0].getContext("2d");

        trackTransforms(context);

        var redact = false;
        var pan = false;

        var startX;
        var startY;
        var endX;
        var endY;

        var redactions = new Array();
        var imageSource = new Image();

        imageSource.onload = function () {
            context.canvas.width = imageSource.width;
            context.canvas.height = imageSource.height;
            redraw();
        }

        imageSource.src = "/images/canvas-buffer/x.jpg";

        function redraw() {
            //console.log("w: " + imageSource.width + ", h: " + imageSource.height);

            var p1 = context.transformedPoint(0,0);
			var p2 = context.transformedPoint(canvas.width,canvas.height);
			context.clearRect(p1.x,p1.y,p2.x-p1.x,p2.y-p1.y);

            //context.clearRect(0, 0, context.canvas.width, context.canvas.height);
            context.drawImage(imageSource, 0, 0, context.canvas.width, context.canvas.height);


            for (var i = 0; i < redactions.length; i++) {
                context.beginPath();
                context.fillStyle = "#0000FF";
                context.fillRect(redactions[i].x, redactions[i].y, redactions[i].w, redactions[i].h);
                context.stroke();
            }

            //console.log("context.canvas.width: " + context.canvas.width + ", context.canvas.height: " + context.canvas.height);
        }


        function onDrag() {
            redraw();

            context.beginPath();
            context.fillStyle = "#FF0000";
            context.fillRect(startX, startY, endX - startX, endY - startY);
            context.stroke();
        }

        function onPan() {

        }

        $('#canvas').mousedown(function (e) {
                startX = e.pageX - this.offsetLeft;
                startY = e.pageY - this.offsetTop;
                endX = startX;
                endY = startY;

            // Left mouse button
            if (e.button === 0) {
                redact = true;
                console.log("start-redact (" + startX + ", " + startY + ")");
                onDrag();
            }
            // Right mouse button
            else if (e.button === 2) {
                pan = true;
                console.log("start-pan (" + startX + ", " + startY + ")");
                onPan();            }
        });

        $('#canvas').mousemove(function (e) {
            endX = e.pageX - this.offsetLeft;
            endY = e.pageY - this.offsetTop;

            if (redact) {
                onDrag();
            }

            if (pan) {
                onPan();
            }
        });

        $('#canvas').mouseup(function (e) {
            if (redact) {
                redact = false;
                console.log("end-redact: (" + startX + ", " + startY + ") -> (" + endX + ", " + endY + ")");

                redactions.push({
                    x: startX,
                    y: startY,
                    w: endX - startX,
                    h: endY - startY
                });

                redraw();
            }

            if (pan) {
                pan = false;
                console.log("end-pan: (" + startX + ", " + startY + ") -> (" + endX + ", " + endY + ")");
            }
        });

        $('#canvas').mouseleave(function (e) {
            if (redact) {
                redact = false;
                redraw();
            }
        });
    </script>


    <script>
        $("#undo").click(function () {
            redactions.pop();
            redraw();
        });
    </script>
}