@model AspNetCoreMVC.Models.Canvas.ViewModel

@{
    ViewData["Title"] = "Canvas";
}

    <div style="margin:10px">
        <canvas id="canvas" width="500" height="500" style="border:1px solid #000000;"></canvas>
    </div>

    <button id="undo">oops</button>

@section Scripts{

    @*
        Disable 'save image...' stuff
    *@
    <script>
        $("#canvas").bind('contextmenu', function (e) {
            return false;
        });
    </script>

    @*<script src="~/js/trackTransforms.js"></script>*@

    <script>
        var context = $("#canvas")[0].getContext("2d");

        //trackTransforms(context);

        var redact = false;
        var pan = false;

        // We don't get movementX/Y properties on mouse move under IE, so keep track of it ourselves.
        var prevX = 0;
        var prevY = 0;

        // Capture drag values
        var startX;
        var startY;
        var endX;
        var endY;

        // Panning & zooming
        var panX = 0;
        var panY = 0;
        var scale = 1.0;

        var redactions = new Array();
        var imageSource = new Image();

        imageSource.onload = function () {
            context.canvas.width = imageSource.width;
            context.canvas.height = imageSource.height;
            redraw();
        }

        imageSource.src = "/images/canvas-buffer/x.jpg";

        function redraw() {
            context.clearRect(0, 0, canvas.width, canvas.height);
            context.save();
            context.translate(panX, panY);
            context.scale(scale, scale);

            context.drawImage(imageSource, 0, 0, context.canvas.width, context.canvas.height);

            for (var i = 0; i < redactions.length; i++) {
                context.beginPath();
                context.fillStyle = "#0000FF";
                context.fillRect(redactions[i].x, redactions[i].y, redactions[i].w, redactions[i].h);
                context.stroke();
            }

            context.restore();
        }


        function onDrag() {
            redraw();

            context.beginPath();
            context.fillStyle = "#FF0000";
            context.fillRect(startX, startY, endX - startX, endY - startY);
            context.stroke();
        }

        function onPan() {
            redraw();
        }

        $('#canvas').mousedown(function (e) {
            startX = e.pageX - this.offsetLeft;
            startY = e.pageY - this.offsetTop;
            endX = startX;
            endY = startY;
            prevX = 0;
            prevY = 0;

            // Left mouse button
            if (e.button === 0) {
                redact = true;
                console.log("start-redact (" + startX + ", " + startY + ")");
                onDrag();
            }
            // Right mouse button
            else if (e.button === 2) {
                pan = true;
                console.log("start-pan (" + startX + ", " + startY + ")");
                onPan();
            }
        });


        $('#canvas').mousemove(function (e) {
            // We don't get movementX/Y properties on mouse move under IE, so keep track of it ourselves.
            var movementX = (prevX ? e.screenX - prevX : 0)
            var movementY = (prevY ? e.screenY - prevY : 0)
            prevX = e.screenX;
            prevY = e.screenY;

            endX = e.pageX - this.offsetLeft;
            endY = e.pageY - this.offsetTop;

            if (redact) {
                onDrag();
            }

            if (pan) {
                panX += movementX;
                panY += movementY;
                onPan();
            }
        });


        $('#canvas').mouseup(function (e) {
            if (redact) {
                redact = false;
                console.log("end-redact: (" + startX + ", " + startY + ") -> (" + endX + ", " + endY + ") - scale: " + scale);

                var x = (startX - panX) / scale;
                var y = (startY - panY) / scale;
                var w = (endX - startX) / scale;
                var h = (endY - startY) / scale;

                // redaction area covers at least part of the image
                if (x < imageSource.width && y < imageSource.height && x + w > 0 && y + h > 0) {
                    // clip redaction area if it falls off the edge of the image
                    if (x < 0) {
                        w = w + x;
                        x = 0;
                    }
                    if (y < 0) {
                        h = h + y;
                        y = 0;
                    }
                    if (x + w > imageSource.width) {
                        w = imageSource.width - x;
                    }
                    if (y + h > imageSource.height) {
                        h = imageSource.height - y;
                    }

                    redactions.push({
                        x: x,
                        y: y,
                        w: w,
                        h: h
                    });
                }

            }

            if (pan) {
                pan = false;
            }

            redraw();
        });

        $('#canvas').mouseleave(function (e) {
            if (redact) {
                redact = false;
                redraw();
            }
        });


        $('#canvas').on('wheel', function(event){
          // deltaY obviously records vertical scroll, deltaX and deltaZ exist too
            var oldscale = scale;

            if(event.originalEvent.deltaY < 0){
                scale += 0.1;
            }
            else {
                scale -= 0.1;
                if (scale < 1) {
                    scale = 1;
                }
            }

            console.log("scale - mse: (" + event.originalEvent.x + ", " + event.originalEvent.y + ")");
            // @@TODO: When zooming in, pan across towards wherever the mouse curser is....
            //var scalechange = scale - oldscale;
            //panX = -(event.originalEvent.x * scalechange);
            //panY = -(event.originalEvent.y * scalechange);

            redraw();
        });
    </script>


    <script>
        $("#undo").click(function () {
            redactions.pop();
            redraw();
        });
    </script>
}